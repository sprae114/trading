version: '3.8'
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trading-frontend
    image: trading-frontend:latest
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - trading-network
    restart: on-failure

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading-backend
    image: trading-backend:latest
    ports:
      - "8080:8080"
    env_file:
      - ./backend/.env
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    depends_on:
      - mysql
      - redis
      - mongodb
      - kafka
      - minio
    networks:
      - trading-network

  mysql:
    image: mysql:8.0
    container_name: trading-mysql
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: tradingDB
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - trading-network

  redis:
    image: redis:7.0
    container_name: trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - trading-network

  mongodb:
    image: mongo:5.0
    container_name: trading-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 1234
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - trading-network

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: trading-zookeeper
    ports:
      - "2181:2181"
    networks:
      - trading-network

  kafka:
    image: wurstmeister/kafka
    container_name: trading-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - trading-network

  minio:
    image: minio/minio:latest
    container_name: trading-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - trading-network

volumes:
    mysql-data:
    redis-data:
    mongodb-data:
    minio-data:

networks:
  trading-network:
    driver: bridge